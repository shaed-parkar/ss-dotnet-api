pr:
  branches:
    include:
      - main
      - feature/*
  paths:
    exclude:
      - scripts
    include:
      - src
      - tests
  drafts: false

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - scripts
    include:
      - src
      - tests

variables:
  - name: "BuildConfiguration"
    value: "Release"
  - name: "PoolName"
    value: "ubuntu-latest"
  - group: general

stages:
  - stage: Build
    displayName: "Build & Test API"
    jobs:
      - job: API
        displayName: "Build API"
        pool:
          vmImage: $(PoolName)

        steps:
          - task: UseDotNet@2
            displayName: Use .NET 6.0
            inputs:
              packageType: "sdk"
              version: "6.0.x"

          - task: DotNetCoreCLI@2
            displayName: Restore Packages
            inputs:
              command: "restore"
              projects: "**/*.csproj"
              workingDirectory:

          - task: DotNetCoreCLI@2
            displayName: "Build Projects"
            inputs:
              command: "build"
              projects: "**/*.csproj"
              arguments: "--no-restore --configuration $(BuildConfiguration)"

          - task: DotNetCoreCLI@2
            displayName: Package API
            inputs:
              command: publish
              publishWebProjects: True
              arguments: "--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: True

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifacts
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              artifactName: "App"

      - job: Tests
        displayName: "Test API"
        pool:
          vmImage: $(PoolName)
        dependsOn: API
        condition: succeeded()

        steps:
          - task: DockerCompose@0
            displayName: Runs tests
            inputs:
              action: Run a Docker Compose command
              dockerComposeFile: tests/docker-compose.tests.yml
              projectName: $(Build.Repository.Name)
              dockerComposeCommand: up
              arguments: --build --abort-on-container-exit

          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testResultsFormat: "VSTest" # Options: JUnit, NUnit, VSTest, xUnit, cTest
              testResultsFiles: "**/*TestResults.trx"
              searchFolder: $(System.DefaultWorkingDirectory)/TestResults
              failTaskOnFailedTests: false

          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage report"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml"

  - stage: Staging
    displayName: "Deploy to Staging"
    dependsOn: "Build"
    jobs:
      - template: ./templates/stages/jobs/deploy-azure-web-app.yaml
        parameters:
          poolName: $(PoolName)
          subscription: $(subscription)
          environmentName: "Staging"
          artifactName: "App"
          artifactItemPattern: "**/*.zip"
          appType: "webApp"
          appName: $(api_app_name_staging)
          package: "$(Pipeline.Workspace)/**/*.zip"

  - stage: Production
    displayName: "Deploy to Production"
    dependsOn: "Build"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - job:
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download artifact"
            inputs:
              buildType: "current"
              artifactName: "App"
              itemPattern: "**/*.zip"
              path: $(Pipeline.Workspace)/App
              preferTriggeringPipeline: true

      - deployment: deploy
        displayName: "Deploy to Production"
        pool:
          vmImage: $(PoolName)
          workspace:
            clean: all
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: $(subscription)
                    appType: "webApp"
                    appName: $(api_app_name_production)
                    package: "$(Pipeline.Workspace)/**/*.zip"
                    deploymentMethod: "auto"
